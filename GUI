from tkinter import *
from tkinter.simpledialog import *
from tkinter.filedialog import *
from PIL import Image, ImageFilter

def displayImage(image, width, height) :
    global window, canvas, paper, photo, photo2, oriX, oriY
    window.geometry(str(width) + "x" + str(height))

    canvas = Canvas(window, width = width, height = height)
    paper = PhotoImage(width = width, height = height)
    canvas.create_image((width / 2, height / 2), image = paper, state = "normal")
    rgbString = ""
    rgbImage = image.convert('RGB')
    
    for i in range(0, height) : 
        tmpString = ""
        for k in range(0, width) : 
            r,g,b = rgbImage.getpixel((k,i))
            tmpString += "#%02x%02x%02x " % (r,g,b) # x 뒤에 한칸 공백
        rgbString += "{" + tmpString +  "} " # } 뒤에 한칸 공백
        
    paper.put(rgbString)
    canvas.pack(side = TOP)

def open() :
    global window, canvas, paper, photo, photo2, oriX, oriY
    
    readFp = askopenfilename(parent = window, filetypes = (("모든 그림 파일", "*.jpg; *.jpeg; *.bmp; *.png; *tif; *.gif"), ("모든 파일","*.*")))
        
    photo = Image.open(readFp).convert("RGB")
    oriX = photo.width
    oriY = photo.height
    
    photo2 = photo.copy()
    
    newX = photo2.width
    newY = photo2.height
    
    displayImage(photo2, newX, newY)

def exit() : 
    window.quit()
    window.destroy()

    
def foodcheck() : 
    Text = Label(window, text = '음식을 확인해주세요')
    Text.pack(padx = 5, pady = 5)
    
    ## train 시킬 모델 구성하는 작업
    from PIL import Image
    import os, glob, numpy as np
    from sklearn.model_selection import train_test_split

    caltech_dir = "C:/data/project/train"
    categories = ['cup_cakes', 'donuts', 'french_fries', 'gyoza', 'hamberger', 'ice_cream', 'macarons', 'pizza', 'ramen',
                'risotto', 'sandwich', 'spaghetti_bolognese', 'spaghetti_carbonara', 'sushi', 'takoyaki', 'tiramisu', 'waffles']
    nb_classes = len(categories)

    ## 카테고리 별로 돌면서 label을 0으로 초기화
    image_w = 64
    image_h = 64

    pixels = image_h * image_w * 3

    X = []
    y = []

    for idx, cat in enumerate(categories):

        #one-hot 돌리기.
        label = [0 for i in range(nb_classes)]
        label[idx] = 1

        image_dir = caltech_dir + "/" + cat
        files = glob.glob(image_dir+"/*.jpg")
        print(cat, " 파일 길이 : ", len(files))
        for i, f in enumerate(files):
            img = Image.open(f)
            img = img.convert("RGB")
            img = img.resize((image_w, image_h))
            data = np.asarray(img)

            X.append(data)
            y.append(label)

            if i % 700 == 0:
                print(cat, " : ", f)

    X = np.array(X)
    y = np.array(y)
    # 1 0 0 0 이면 apple_pie
    # 0 1 0 0 이면 baklava 이런식

    # numpy 라이브러리를 이용하여 저장
    X_train, X_test, y_train, y_test = train_test_split(X, y)
    xy = (X_train, X_test, y_train, y_test)
    np.save("C:/data/project/train/multi_image_data.npy", xy)

    print("ok", len(y))
    
    import os, glob, numpy as np
    from keras.models import Sequential
    from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
    from keras.callbacks import EarlyStopping, ModelCheckpoint
    import matplotlib.pyplot as plt
    import keras.backend.tensorflow_backend as K
    import tensorflow as tf

    ## tensorflow의 특성상 모든 gpu 메모리를 할당받은 후 이용하기 때문에 메모리 낭비 심함
    ## allow_groth 옵션을 통해 작은 메모리에서 큰 메모리로 사용량에 따라 늘려가게 함
    config = tf.compat.v1.ConfigProto()
    config.gpu_options.allow_growth = True
    session = tf.compat.v1.Session(config=config)

    ## numpy를 불러와서 train시키게 함
    X_train, X_test, y_train, y_test = np.load("C:/data/project/train/multi_image_data.npy",allow_pickle=True)
    print(X_train.shape)
    print(X_train.shape[0])
    
    categories = ['cup_cakes', 'donuts', 'french_fries', 'gyoza', 'hamberger', 'ice_cream', 'macarons', 'pizza', 'ramen',
            'risotto', 'sandwich', 'spaghetti_bolognese', 'spaghetti_carbonara', 'sushi', 'takoyaki', 'tiramisu', 'waffles']
    nb_classes = len(categories)

    # 데이터 타입을 일반화 시키기
    X_train = X_train.astype(float) / 255
    X_test = X_test.astype(float) / 255

    ## 신경망 만들기
    with K.tf_ops.device('/device:GPU:0'):
        model = Sequential()
        model.add(Conv2D(32, (3,3), padding="same", input_shape=X_train.shape[1:], activation='relu'))
        model.add(MaxPooling2D(pool_size=(2,2)))
        model.add(Dropout(0.25))

        model.add(Conv2D(64, (3,3), padding="same", activation='relu'))
        model.add(MaxPooling2D(pool_size=(2,2)))
        model.add(Dropout(0.25))

        model.add(Flatten())
        model.add(Dense(256, activation='relu'))
        model.add(Dropout(0.5))
        model.add(Dense(nb_classes, activation='softmax'))
        model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
        model_dir = './model'

        if not os.path.exists(model_dir):
            os.mkdir(model_dir)

        model_path = model_dir + '/multi_img_classification.model'
        checkpoint = ModelCheckpoint(filepath=model_path , monitor='val_loss', verbose=1, save_best_only=True)
        early_stopping = EarlyStopping(monitor='val_loss', patience=6)
        
    ## 모델 요약
    model.summary()
    
    history = model.fit(X_train, y_train, batch_size=32, epochs=50, validation_data=(X_test, y_test), callbacks=[checkpoint, early_stopping])
    
    from PIL import Image
    import os, glob, numpy as np
    from keras.models import load_model

    caltech_dir = "C:/data/project/preidct"
    image_w = 64
    image_h = 64

    pixels = image_h * image_w * 3

    X = []
    filenames = []
    files = glob.glob(caltech_dir+"/*.*")
    for i, f in enumerate(files):
        img = Image.open(f)
        img = img.convert("RGB")
        img = img.resize((image_w, image_h))
        data = np.asarray(img)
        filenames.append(f)
        X.append(data)

    X = np.array(X)
    model = load_model('./model/multi_img_classification.model')

    prediction = model.predict(X)
    np.set_printoptions(formatter={'float': lambda x: "{0:0.3f}".format(x)})
    cnt = 0

    #이 비교는 그냥 파일들이 있으면 해당 파일과 비교. 카테고리와 함께 비교해서 진행하는 것은 _4 파일.
    for i in prediction:
        pre_ans = i.argmax()  # 예측 레이블
        print(i)
        print(pre_ans)
        pre_ans_str = ''

        for a in range(0, nb_classes, 1) :
            if pre_ans == a :
                pre_ans_str = categories[a]
                Text = Label(window, text = "해당 "+filenames[cnt].split("\\")[1]+"이미지는 "+pre_ans_str+"로 추정됩니다.")
                Text.pack(padx = 5, pady = 5)

        cnt += 1
        # 즉 얘랑, 나중에 카테고리 데이터 불러와서 카테고리랑 비교를 해서 같으면 맞는거고, 아니면 틀린거로 취급하면 된다.
        # 이걸 한 것은 _4.py에.
    
def foodinfoinput() : 
    Text = Label(window, text = "양이나 개수를 알려주세요")
    Text.pack(padx = 5, pady = 5)
    
    amount = askinteger("양이나 개수", "양이나 개수를 입력하세요 (1~50)" ,minvalue = 1, maxvalue = 50)
    
    Text2 = Label(window, text = str(amount) + "양을(개수를) 입력하셨습니다")
    Text2.pack(padx = 5, pady = 5)
    
def information() : 
    Text1 = Label(window, text = "한 조각이나 일 인분 기준을 먼저 보여드리겠습니다")
    Text1.pack(padx = 5, pady = 5)
    
    import urllib.request
    from bs4 import BeautifulSoup

    ## 음식_list
    list = ['cup-cakes', 'donuts', 'french-fries', 'gyoza', 'hamberger', 'ice-cream', 'macarons', 'pizza', 'ramen',
                 'risotto', 'sandwich', 'spaghetti-bolognese', 'spaghetti-carbonara', 'sushi', 'takoyaki', 'tiramisu', 'waffles']
    food_dict = {}

    for food in list:
        url = "https://www.myfitnesspal.com/ko/nutrition-facts-calories/" + str(food) + "/"
        req = urllib.request.urlopen(url)
        res = req.read()
        soup = BeautifulSoup(res,'html.parser') # BeautifulSoup 객체생성
        calory_keywords = soup.find_all('div',class_='jss14') # 데이터에서 태그와 클래스를 찾는 함수
        calory_keywords = [each_line.get_text().strip() for each_line in calory_keywords[:1]]

        food_dict[food] = calory_keywords[0]    

    Text = Label(window, text = food_dict[food])
    Text.pack(padx = 5, pady = 5)
    
    Text2 = Label(window, text = "입력하신 양에 따른 열량과 영양소입니다")
    Text2.pack(padx = 5, pady = 5)
    
    Text3 = Label(window, text = food_dict["pre_ans_str"])
    Text.pack(padx = 5, pady = 5)

    
if __name__ == "__main__" : 
    window = Tk()
    sb = Scrollbar(window)
    sb.pack(side = RIGHT, fill = Y)
 
    window.title("머신는_러닝머신")
    
    mainMenu = Menu(window)
    window.config(menu = mainMenu)
    
    fileMenu = Menu(mainMenu)
    mainMenu.add_cascade(label = "파일", menu = fileMenu)
    fileMenu.add_command(label = "파일 열기", command = open)
    fileMenu.add_separator()
    fileMenu.add_command(label = "종료", command = exit)

    checkMenu = Menu(mainMenu)
    mainMenu.add_cascade(label = "음식 확인하기", menu = checkMenu)
    checkMenu.add_command(label = "음식 확인하기", command = foodcheck)
    checkMenu.add_command(label = "음식 정보 입력하기", command = foodinfoinput)
    
    informationMenu = Menu(mainMenu)
    mainMenu.add_cascade(label = "음식 영양소 또는 칼로리 확인하기", menu = informationMenu)
    informationMenu.add_command(label = "음식 영양소 확인하기", command = information)
    
    window.mainloop()
